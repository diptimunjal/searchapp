{"version":3,"sources":["components/SearchBar.js","components/Picture.js","components/SearchList.js","containers/Search.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","className","type","onChange","takeInput","placeholder","onClick","btClick","Picture","src","url","alt","SearchList","totalNumberOfRecords","imgdata","length","console","log","noRecordFoundJSX","successJSX","map","ele","images","original","Search","state","imagedata","searchTxtValue","searchValue","fetch","then","response","json","result","data","setState","catch","err","event","target","value","this","giveMeTheData","title","name","bind","searchNow","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAMaA,EAAU,SAACC,GAGpB,OAAQ,sBAAKC,UAAU,aAAf,UACR,2CACA,uBAAOC,KAAK,OAAOC,SAAUH,EAAMI,UAAWH,UAAU,eAAeI,YAAY,6BAGnF,wBAAQC,QAASN,EAAMO,QAASN,UAAU,kBAA1C,4BCZSO,EAAU,SAACR,GACpB,OAAQ,qBAAKS,IAAKT,EAAMU,IAAKC,IAAI,sBCDxBC,EAAa,SAACZ,GACvB,IAAIa,EAAuBb,EAAMc,QAAQC,OACzCC,QAAQC,IAAI,oBAAoBjB,EAAMc,eAAed,EAAMc,SAC3D,IAAMI,EAAiB,kDACjBC,EACV,qCACA,iDAAoBN,KACnBb,EAAMc,QAAQM,KAAI,SAAAC,GAAG,OAAE,cAAC,EAAD,CAASX,IAAKW,EAAIC,OAAOC,SAASb,SAF1D,SAYI,OACI,gCAC2B,GAAtBV,EAAMc,QAAQC,OAAUG,EAAiBC,EAD9C,SCdaK,E,kDACjB,WAAYxB,GAAO,IAAD,8BAEd,cAAMA,IAIDyB,MAAQ,CAACC,UAAU,IAGxB,EAAKC,eAAiB,GATR,E,uGAeJC,GAAa,IAAD,OAChBlB,EAAG,0FAAqFkB,EAArF,YAEOC,MAAMnB,GACdoB,MAAK,SAAAC,GACDA,EAASC,OACfF,MAAK,SAAAG,GACHjB,QAAQC,IAAI,WAAWgB,EAAOC,MAC9B,EAAKC,SAAS,CAACT,UAAUO,EAAOC,UAGjCE,OAAM,SAAAC,GACLrB,QAAQC,IAAI,iBAAiBoB,MAEjCrB,QAAQC,IAAI,sBAAsBc,MACnCK,OAAM,SAAAC,GACLrB,QAAQC,IAAI,gCAAgCoB,Q,gCAG1CC,GACN,IAAIJ,EAAOI,EAAMC,OAAOC,MACxBC,KAAKd,eAAiBO,EAGtBlB,QAAQC,IAAI,yBAAyBwB,KAAKd,kB,kCAG1CX,QAAQC,IAAI,0BACZwB,KAAKC,cAAcD,KAAKd,kB,+BAI1B,OADEX,QAAQC,IAAI,6BAA6BwB,KAAKhB,MAAMC,WAEpD,gCACA,qBAAIzB,UAAU,4BAAd,UAA2CwC,KAAKzC,MAAM2C,MAAtD,SAAqEF,KAAKzC,MAAM4C,QADhF,MAID,cAAC,EAAD,CAAWxC,UAAYqC,KAAKrC,UAAUyC,KAAKJ,MAAOlC,QAASkC,KAAKK,UAAUD,KAAKJ,QAJ9E,KAOD,cAAC,EAAD,CAAY3B,QAAS2B,KAAKhB,MAAMC,YAP/B,W,GAjD4BqB,IAAMC,WCHnC,SAASC,EAAIjD,GAElB,OACF,sBAAKC,UAAU,YAAf,gBACE,cAAC,EAAD,CAAQ0C,MAAM,iBAAkBC,KAAK,UADvC,gBCNA,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACX,EAAD,MAEFY,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f0c70748.chunk.js","sourcesContent":["import React from 'react';\r\n/*function SearchBar()\r\n{\r\n//old way \r\n}\r\n*/\r\nexport const SearchBar=(props)=>{\r\n    \r\n    \r\n    return (<div className='form-group'>\r\n    <label>Search</label>\r\n    <input type='text' onChange={props.takeInput} className='form-control' placeholder='Type to Search any Image'/>\r\n    {/* {props.takeinput}=we are not calling function here, hence not pass args(event) as this is callback function on oncahnge\r\n    hence internally oncahnge calls this func and passes arg, hence recieving arg (event) in takeinput in search.js}*/}\r\n    <button onClick={props.btClick} className='btn btn-primary'>Search Now</button>\r\n    </div>\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\n/*export const SearchBar=()=>{\r\n    return (<div className='form-group'>\r\n        <label>Search</label>\r\n        <input type='text' className='form-control' placeholder='Type to Search any Image'/>\r\n        <button className='btn btn-primary'>Search Now</button>\r\n        </div>\r\n        );\r\n}\r\n*/","  \r\nimport React from 'react';\r\nexport const Picture = (props)=>{\r\n    return (<img src={props.url} alt=\"Image is Missing\"/>)\r\n}","import React from 'react';\r\nimport { Picture } from './Picture'; \r\nexport const SearchList = (props)=>{           //props only when Searchlist called with args frdom Search,& property name is imgdata\r\n    let totalNumberOfRecords = props.imgdata.length;          //no of records=length of array recieved\r\n    console.log('Props rec in List',props.imgdata,typeof(props.imgdata)); \r\n    const noRecordFoundJSX=<p>No Record Found!!</p>;\r\n    const successJSX=(\r\n<>\r\n<p>List of Records {totalNumberOfRecords}</p>\r\n{props.imgdata.map(ele=><Picture url={ele.images.original.url}/>)}   {/*printing isme krne ke bjaye , pass it to picture component giving arg=url , having the gif url/*}\r\n {/* {props.imgdata.map(ele=><img src={ele.images.original.url}/>)} \r\n   //traversing over the array using map and covert each array element se url nikalkar(as give that url is in image->oriiginal->url \r\n   on giphy site) ,convert it to img tag, i.e to show image */}  \r\n \r\n</>\r\n\r\n    );\r\n//it works fine,but on console gives warning as we are traversing , hence each time picture> tag is duplicated  hence react needs \r\n//unique key to differ , therfore-> (ele=><Picture key={ele.id} url={ele.images.original.url}/>), i.e find whats unique in elemnts, in this case its id\r\n    return (\r\n        <div>\r\n            {props.imgdata.length==0?noRecordFoundJSX:successJSX}  {/*applying condtion to make it cleaner & const replace directly,although can give p , img tag here also*/}\r\n        </div>\r\n    )\r\n}","\r\n\r\nimport React from 'react';\r\nimport { SearchBar } from '../components/SearchBar';\r\nimport { SearchList } from '../components/SearchList';\r\n\r\nexport default class Search extends React.Component{    //to become component,it needs to extend from React.component\r\n    constructor(props){\r\n        // Init Props and States\r\n        super(props); // calling a parent(React.component) constructor\r\n        // initalize the props from the parent and give it to child\r\n        //i.e. initially -> props = {} // It is an Empty Object\r\n//if App(i.e caller)is passing some args/properties=> let e.g title, then -->  props.title = \"Image Search App\"\r\n        this.state = {imagedata:[]};    //state is object-> this.state={};  or this shows , initially the imagedata array is empty.\r\n        //this.data always needed.\r\n\r\n        this.searchTxtValue = '';\r\n\r\n    }\r\n    componentDidMount(){    //life cycle method called automatically- when component is loaded/mounted on the screen\r\n        //this.giveMeTheData();\r\n    }\r\n    giveMeTheData(searchValue){   //searchvalue= jo bhi user ka fianl enetred text in textbox hai when button is cliked \r\n        const url =`https://api.giphy.com/v1/gifs/search?api_key=vFRSFWo6g7vJ7ZAjt3DMDolU52ORTxwH&q=${searchValue}&limit=5`;  //very imp to use backtick= ``, naki ' ' , else treated as simple string \r\n        \r\n        const promise = fetch(url);\r\n        promise.then(response=>{     //response is data packet (header + body)recieved,body data is in json form,hence if console.log(response)->in json form\r\n            var p = response.json();  // hence do this,json converted to object, takes time, hence this call also returns promise.\r\n            p.then(result=>{\r\n                console.log('Data is ',result.data);    //result ko bhi print krske hain no error, but result has an array named data, , so to loop over it\r\n                this.setState({imagedata:result.data});  //it stores the data in state(that is in imagedata array ) \r\n                                                            //& whenever we call it , it triggers render. ( )\r\n\r\n            }).catch(err=>{\r\n                console.log('Error in JSON ',err);\r\n            })\r\n            console.log('Response is Coming ',response);\r\n        }).catch(err=>{\r\n            console.log('Error Coming From the Server ',err);\r\n        })\r\n    }\r\n    takeInput(event){   //called on onchangeEvent of textbox \r\n        let data = event.target.value;    //event happens on textbox,hence event.target is Textbox, .value give its value\r\n        this.searchTxtValue = data;//but this data value is local to this func, hence in contr, declare var searchTxtValue\r\n        //this.setState{xxx:data}   //not using setstate to do this rather other new variable Searchtxtvalue as setstate wil call render each time which \r\n                                    //is not needed as impacting perforance\r\n        console.log('Being called by Child ',this.searchTxtValue);\r\n    }\r\n    searchNow(){\r\n        console.log('Search Button is Click');\r\n        this.giveMeTheData(this.searchTxtValue);//when button cliked, calling givemedata with value to be used in searching gifs\r\n    }\r\n    render(){       //overriding render() of React.Component (unlike simpe returm(only print)  in arrow function of dumb component, render  has many works to do)\r\n        console.log('RENDER :::: Image Data is ',this.state.imagedata);      //now we have data in imagedata array, so printing it\r\n      return (\r\n        <div >\r\n        <h1 className='alert-success text-center'>{this.props.title} &nbsp; {this.props.name}</h1>   {/*rather than hard coding 'search engine app , as eralier in dumb, we use prop passed from caller= App'*/}\r\n       {/* <SearchBar/>\r\n       <SearchList/>*/}  \r\n       <SearchBar takeInput= {this.takeInput.bind(this)} btClick={this.searchNow.bind(this)}/>  {/*passing functions takeinput & searchnow as props to Searchbar component as it needs to call these 2 */}\r\n     {/*if only {this.takeInput}, then error in line=this.searchTxtValue of tekeinput function as that func is being called by another component,\r\n      hence 'this' cant be traced, therfore wew need to bind(this) */}\r\n       <SearchList imgdata={this.state.imagedata}/> {/*sending imagedata ARRAY with prop name=imgdata to SL as it is responsible for printing it*/}\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\n/*(DUMB & old ) i.e only for printing, hence make it Smart component(via making class)  as Search is the top level one , hence it has lot of work.\r\nfunction Search()\r\n{\r\n    return(<div>\r\n\r\n        <h1 className='alert-info text-center'>Search Engine App</h1>    //alert-info =blue color box\r\n        <SearchBar/>\r\n        <SearchList/>\r\n\r\n    </div>)\r\n\r\n}\r\n\r\nexport default Search;\r\n*/","//APP is top level component \nimport React from 'react';\nimport Search from './containers/Search';\nexport function App(props)   //why props here?\n{\n  return (\n<div className=\"container\">   {/*left me maginal gap*/}\n  <Search title='ImageSearchApp'  name='Dipti'/>          {/*internally= new search(); and constructor me pass title prop*/}\n\n</div>\n\n\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}